<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Michael Zhang</title>
    <link>http://localhost:4000</link>
    <description>Blog of Michael Zhang</description>
    
      <item>
        <title>Local Blog Jekyll</title>
        <link>http://localhost:4000/2017/08/27/Local-Blog-Jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/27/Local-Blog-Jekyll.html</guid>
        <pubDate>Sun, 27 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;&lt;strong&gt;Operation System: Ubuntu16.04&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Open Terminal&lt;/li&gt;
  &lt;li&gt;Check whether you have Ruby 2.1.0 or higher installed:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ruby --version
 Outputs:
 ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If you don’t have Ruby 2.1.0 or higher installed, just &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/#apt&quot;&gt;install Ruby&lt;/a&gt;:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt install ruby-full
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;install Bundler:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo gem install bundler
 Outputs:
 Successfully installed bundler-1.15.4
 Parsing documentation for bundler-1.15.4
 Done installing documentation for bundler after 4 seconds
 1 gem installed
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If you already have a local repository for your Jekyll site, skip to Step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-1-create-a-local-repository-for-your-jekyll-site&quot;&gt;Step 1: Create a local repository for your Jekyll site&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;If you haven’t already downloaded Git, install it.&lt;/li&gt;
  &lt;li&gt;Open Terminal.&lt;/li&gt;
  &lt;li&gt;On your local computer, initialize a new Git repository for your Jekyll site:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git init JekyIItest
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd JekyIItest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create a new index.html as the home of your site:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  		&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  		Hello Jekyll!
  	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Note: You can skip this step 1.6 if you would rather use the master branch for
your Project Page. If you haven’t checked out any branches, once you make a Community
in your local repository, your change will appear on the &lt;em&gt;master&lt;/em&gt; branch by default.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;If your new local repository is for a Project Page site, create a new gh-pages branch:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # Creates a new branch called 'gh-pages', and checks it out
 git checkout -b gh-pages
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-2-install-jekyll-using-bundler&quot;&gt;Step 2: Install Jekyll using bundler&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;create a new file Gemfile, and add these lines to Gemfile:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;&amp;gt;&amp;gt; vim Gemfile

 source 'https://rubygems.org'
 gem 'github-pages', group: :jekyll_plugins
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Make sure that the file which name is Gemfile should be saved to the root directory of your local Jekyll site repository.&lt;/li&gt;
  &lt;li&gt;Install Jekyll and other &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;dependencies&lt;/a&gt; from the GitHub Pages gem:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bundle install
 Outputs:
 ......
 -------------------------------------------------
 Thank you for installing html-pipeline!
 You must bundle Filter gem dependencies.
 See html-pipeline README.md for more details.
 https://github.com/jch/html-pipeline#dependencies
 -------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-3-build-your-local-jekyll-site&quot;&gt;Step 3: Build your local Jekyll site&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate into the root directory of your local Jekyll site repository.&lt;/li&gt;
  &lt;li&gt;Run your Jekyll site locally:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bundle exec jekyll serve
 Outputs:
 Source: /home/zj/JekyIItest
 Destination: /home/zj/JekyIItest/_site
 Incremental build: disabled. Enable with --incremental
 Generating...
         done in 0.011 seconds.
 Auto-regeneration: enabled for '/home/zj/JekyIItest'
 Server address: http://127.0.0.1:4000
 Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Congratulations&lt;/strong&gt;! You can preview your local Jekyll site in your web browser at http:/127.0.0.1:4000.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;keeping-your-site-up-to-date-with-the-github-pages-gem&quot;&gt;Keeping your site up to date with the GitHub Pages gem&lt;/h1&gt;

&lt;p&gt;Jekyll is an activate open source project and is updated frequently. As the Gitub
Pages server is updated, the software on your computer may became out of date,
resulting in your sit appearing different locally from how it looks when published
on GitHub.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open Terminal.&lt;/li&gt;
  &lt;li&gt;Run this update command:
    &lt;ul&gt;
      &lt;li&gt;If you followed our setup recommendation and installed Bundler, run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update github-pages&lt;/code&gt; or simply &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; and your gem will update to the latest versions.&lt;/li&gt;
      &lt;li&gt;If you don’t have Bundler installed, run &lt;code class=&quot;highlighter-rouge&quot;&gt;gem update github-paegs&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
      </item>
    
      <item>
        <title>A Bettrt Way To Talk About Love</title>
        <link>http://localhost:4000/2017/08/26/A-bettrt-way-to-talk-about-love.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/26/A-bettrt-way-to-talk-about-love.html</guid>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;ted-1&quot;&gt;TED-1&lt;/h1&gt;

&lt;h2 id=&quot;a-better-way-to-talk-about-love&quot;&gt;&lt;a href=&quot;https://www.ted.com/talks/mandy_len_catron_a_better_way_to_talk_about_love/transcript#t-204484&quot;&gt;A better way to talk about love&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://open.163.com/movie/2017/2/D/7/MC9FQL66A_MCA50R4D7.html&quot;&gt;open.163.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, so today I want to talk about how we talk about love. And specifically, I want to talk about what’s wrong with how we talk about love.&lt;/p&gt;

&lt;p&gt;Most of us will probably fall in lave a few times over the course of our lives, and in the English language, this metaphor, falling, is really the main way that we talk about that experience. I don’t know about you, but when I conceptualize this metaphor, what I picture is straight out of a cartoon – like there’s a man, he’s walking down the sidewalk, without realizing it, he crosses over an open manhole, and he just plummets into the sewer below. And I picture it this way because falling is not jumping. Falling is accidental, it’s uncontrollable. It’s something that happens to us without our consent. And this – this is the main way we talk about starting a new relationship.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;metaphor: 比喻&lt;br /&gt;
conceptualize: 概念化，想象&lt;br /&gt;
manhole: 井&lt;br /&gt;
plummets into: 垂直降落&lt;br /&gt;
sewer: 下水道&lt;br /&gt;
consent: 同意&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am a writer and I’m also an English teacher, which means I think about words for living. You could say that I get paid to argue that the language we use matters, and I would like to argue that many of the metaphors we use to talk about love – maybe even most of them – are a problem.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;argue: 论证，表明&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in love, we fall. We’re struck. We are crushed. We swoon. We burn with passion. Love makes us crazy, and it makes us sick. Our hearts ache, and then they break. So our metaphors equate the experience of loving someone to extreme violence or illness.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;struck: 打击，震惊&lt;br /&gt;
crushed: 碎，压碎&lt;br /&gt;
swoon: 昏昏欲睡&lt;br /&gt;
passion: 爱情 &lt;br /&gt;
ache: 疼痛&lt;br /&gt;
equate … to …: 把…等同于…&lt;br /&gt;
extreme: 极端的&lt;br /&gt;
violence: 暴力&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      </item>
    
      <item>
        <title>Matplotlib简单使用</title>
        <link>http://localhost:4000/2017/08/26/matplotlib%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/26/matplotlib%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;python画图工具matplotlib简单使用&quot;&gt;Python画图工具matplotlib简单使用&lt;/h1&gt;

&lt;h2 id=&quot;官网介绍&quot;&gt;&lt;a href=&quot;https://matplotlib.org/&quot;&gt;官网&lt;/a&gt;介绍：&lt;/h2&gt;
&lt;p&gt;Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms.&lt;/p&gt;

&lt;h2 id=&quot;简单使用&quot;&gt;简单使用&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;anaconda自带matplotlib模块。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;制图初步&quot;&gt;制图初步&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;将函数转化成关于X, Y, Z坐标点的数组；&lt;/li&gt;
  &lt;li&gt;利用np.arange进行采样；&lt;/li&gt;
  &lt;li&gt;利用采样点，np.函数计算对应的函数值；&lt;/li&gt;
  &lt;li&gt;数据全部以np.array表达。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;数据的快速产生&quot;&gt;数据的快速产生&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;arange函数进行采样&lt;/li&gt;
  &lt;li&gt;linspace函数指定开始值、终值和元素个数来成创建一维数组。
可以通过endpoint=True关键字指定是否包括终值。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; np.arange(0, 10, 1)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [3]: np.linspace(1,10,10)
Out[3]: array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.])

In [4]: np.linspace(1,10,10, endpoint=False)
Out[4]: array([ 1. ,  1.9,  2.8,  3.7,  4.6,  5.5,  6.4,  7.3,  8.2,  9.1])

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;numpy提供了大量函数，计算速度快
```
import numpy as np
import matplotlib.pyplot as plt
x = np.arange(-np.pi, np.pi, 0.1)
y = np.sin(x)
plt.plot(x, y, ‘b’)
plt.show()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```
&lt;img src=&quot;assets/markdown-img-paste-20170826205737198.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;缩写&lt;/th&gt;
      &lt;th&gt;颜色&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;‘b’&lt;/td&gt;
      &lt;td&gt;blue&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‘g’&lt;/td&gt;
      &lt;td&gt;green&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‘r’&lt;/td&gt;
      &lt;td&gt;red&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‘c’&lt;/td&gt;
      &lt;td&gt;cyan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‘y’&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‘k’&lt;/td&gt;
      &lt;td&gt;black&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;‘w’&lt;/td&gt;
      &lt;td&gt;white&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;未完待续&quot;&gt;未完待续。。。&lt;/h3&gt;

</description>
      </item>
    
      <item>
        <title>Hello_world_to_ml</title>
        <link>http://localhost:4000/2017/08/24/Hello_World_to_ML.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/24/Hello_World_to_ML.html</guid>
        <pubDate>Thu, 24 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;keras-手写数字识别&quot;&gt;keras 手写数字识别&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'''Trains a simple convnet on the MNIST dataset.

Gets to 99.25% test accuracy after 12 epochs
(there is still a lot of margin for parameter tuning).
16 seconds per epoch on a GRID K520 GPU.
'''

from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K

# batch_size　太小会导致训练慢，过拟合等问题；太大会导致欠拟合．
batch_size = 128
# 这是一个分类问题，识别数字０－９.
num_classes = 10
# 迭代次数
epochs = 12

# input image dimensions
# 输入的图片的像素为28*28
img_rows, img_cols = 28, 28

# the data, shuffled and split between train and test sets
# 导入训练数据集和测试数据集（第一次需要下载）
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# 图片可视化
import matplotlib.pyplot as plt

# %matplotlib inline  # jupyter notebook中使用
# subplot(331):整个做图区域划分为3*3块，第三个参数１表示本次图画在第一个区块中．(顺序为由左到右，又上到下)
for i in range(0, 4):
    plt.subplot(220 + (i + 1))
    plt.imshow(x_train[i], cmap=plt.get_cmap('gray_r'))  # 灰度图片：&quot;gray&quot;:黑地白字，　&quot;gray_r&quot;:白底黑字．
    plt.title(y_train[i])
plt.show()  # IDE中需要使用plt.show()来显示图片

# tensorflow的图片格式为（图片个数，图片高度，图片宽度，通道数）
# theano的图片格式为（图片个数，通道数，图片高度10000，图片宽度）
# 灰度图片的通道数为１，
if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

# 数据类型转为float32，结果更精确．
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
# 归一化　每一个通道的数据值为0-255，0表示黑色，255表示白色
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
# 标签转换为独热码，如(0010000000)表示数字2
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

# 构建模型
model = Sequential()  # 序列模型
# 第一层为二维卷积层，卷积层改变图片像素
# 32为filters卷积核的个数，也是输出的维度
# kernel_size为卷积核的大小:3*3
# 激活函数选用的是&quot;relu&quot;
# 第一层必须包含输入数据的格式input_shape参数，后面层的input_shape由模型自己计算出来．
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
# 第二层：卷积层
model.add(Conv2D(64, (3, 3), activation='relu'))
# 第三层：最大池化层
model.add(MaxPooling2D(pool_size=(2, 2)))
# 第四层：Dropout层，对于池化层的输出，暂时丢弃25%的神经元
model.add(Dropout(0.25))
# 第五层：Flatten层，数据一维化
model.add(Flatten())
# 第六层：全连接层，
# 输出128维数据，激活函数选用&quot;softmax&quot;
model.add(Dense(128, activation='relu'))
# 第七层：Dropout层
model.add(Dropout(0.5))
# 第八层：全连接层
# 输出10类数据，激活函数为&quot;softmax&quot;
model.add(Dense(num_classes, activation='softmax'))

# 编译模型，配置模型的学习过程
# 损失函数选用交叉熵，优化器选用Adadelta，将识别准确率作为模型评估指标
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

# 训练模型:fit
# 由训练数据集x_train,y_train拟合模型曲线，再用验证数据集来验证模型的好坏

# batch_size:整数，指定进行梯度下降时每个batch包含的样本数．
# 训练时一个batch的样本会被就算一次梯度下降，使目标函数优化一次．

# epochs:整数，训练的轮数．每个epoch会把训练集轮一遍．

# verbose:日志显示，0为不在标准输出流中输出日志信息，１为输出进度条进度，
# ２为每个epoch输出一行记录

# validation_data:形式为（X, y）的tuple，是指定的验证集．此参数将覆盖validation_split

# validation_split:０－１之间的浮点数，用来指定训练集的一定比例的数据作为验证集．
# 验证集不参与训练，但是会在每个epoch结束后测试模型的指标，如损失函数，精度等．
# 注意validation_split的划分是在shuffle(洗，改组)之前的，因此如果数据本身是有序的，
# 需要先手工打乱再指定validation_split，否则可能会出现验证集样本不均匀．

# shuffle:布尔值或字符串，一般为布尔值，表示是否在训练过程中随即打乱输入样本的顺序．
# 若为字符串＂batch＂，则是用来处理HDF5数据的特殊情况，它将在batch内部将数据打乱．

# class_weight:字典，将不同的类别映射为不同的权值，
# 该参数用来在训练过程中调整损失函数（只能用于训练）．

# sample_weight：权值的numpy array，用于在训练时调整损失函数（仅用于训练）．
# 可以传递一个1D的与样本等长的向量用于对样本进行1对1的加权，或者在面对时序数据时，
# 传递一个的形式为（samples，sequence_length）的矩阵来为每个时间步上的样本赋不同的权．
# 这种情况下请确定在编译模型时添加了sample_weight_mode='temporal'．

# initial_epoch:从该参数指定的epoch开始训练，在继续之前的训练时有效．

# fit函数返回一个History的对象，其History.history属性记录了损失函数和其他指标的数值随epoch
# 变化的情况，如果有验证集的话，也包含了验证集的这些指标的变化情况．
hist = model.fit(x_train, y_train,
                 batch_size=batch_size,
                 epochs=epochs,
                 verbose=1,
                 shuffle=True,
                 validation_data=(x_test, y_test))
with open(&quot;output_fit.txt&quot;, &quot;w&quot;) as f:
    f.write(str(hist.history))

# 评估模型

# evaluate()按batch计算在某些输入数据上模型的误差，其参数有：
# x:输入数据，与fit一样，是numpy array或numpy array list
# y:标签，numpy array

# batch_size:整数，指定进行梯度下降时每个batch包含的样本数．
# 训练时一个batch的样本会被就算一次梯度下降，使目标函数优化一次．

# verbose:日志显示，0为不在标准输出流中输出日志信息，１为输出进度条进度，只能取０或１

# sample_weight: numpy array，含义同fit的同名参数

# 本函数返回一个测试误差的标量值（如果模型没有其他评价指标），
# 或一个标量的list（如果模型还有其他的评价指标）．
# model.metrics_names将给出list中各个值的含义．
score = model.evaluate(x_test, y_test, verbose=0)
print(&quot;metrics_name: &quot;, model.metrics_names)

print('Test loss:', score[0])
print('Test accuracy:', score[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>Io操作</title>
        <link>http://localhost:4000/2017/08/13/IO%E6%93%8D%E4%BD%9C.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/13/IO%E6%93%8D%E4%BD%9C.html</guid>
        <pubDate>Sun, 13 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;io编程&quot;&gt;IO编程&lt;/h1&gt;

&lt;h2 id=&quot;文件读写&quot;&gt;文件读写&lt;/h2&gt;

&lt;h3 id=&quot;读文件&quot;&gt;读文件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  f = open(&quot;/home/username/test.txt&quot;, &quot;r&quot;)  # 在内存中打开文件
  f.read()  # 一次性读取文件的全部内容
  f.close  # 关闭文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;符号“r”表示读，默认读utf-8编码的文本文件，如果要读图片、视频等二进制文件，则用”rb”代替。&lt;/li&gt;
  &lt;li&gt;如果文件不存在，会报IOError的错误。一旦出错，f.close()就不会被调用。最好的方式是用with语句来帮我们自动关闭文件。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;with open(&quot;/home/username/test.txt&quot;, &quot;r&quot;) as f:
    print(f.read())
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;对于大文件，不能一次性读取所有内容，可以反复调用read(size)方法，每次最多读取size字节的内容。或者调用readline()方法，每次读取一行内容；也可以调用readlines()方法，一次读取所有内容并按行返回一个list。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for line in f.readlines()：
    print(line.strip())  # strip()方法可以去掉首尾的空格。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;对于特定编码的文本文件，需要给open()函数传入encoding参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;写文件&quot;&gt;写文件&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  with open(&quot;/home/username/test.txt&quot;, &quot;w[b]&quot;) as f:
      f.write(&quot;Hello World!&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;只有文件关闭之后，对文件所作的更改才能保存到磁盘上。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;操作文件和目录&quot;&gt;操作文件和目录&lt;/h2&gt;

&lt;h2 id=&quot;常用的&quot;&gt;常用的&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;os.path.join(“/home/username/test”, “test.txt”)
    &lt;ul&gt;
      &lt;li&gt;拼接字符串，结果为/home/usrname/test/test.txt&lt;/li&gt;
      &lt;li&gt;根据系统来确定拼接符是“/”(Linux)还是“\”(Windows).&lt;/li&gt;
      &lt;li&gt;操作的是字符串，不需要真实的路径。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.path.split(“/home/username/test.txt”)
    &lt;ul&gt;
      &lt;li&gt;可拆分出文件名&lt;/li&gt;
      &lt;li&gt;返回父目录和文件名或目录名，总共两个字符串。&lt;/li&gt;
      &lt;li&gt;上面返回(“/home/username”, “test.txt”)&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;字符串的split(arg)方法，是根据传入的原字符串中的字符拆分原字符串，返回多个字符串。&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.path.splitext(“filename.txt”)
    &lt;ul&gt;
      &lt;li&gt;可拆分出后缀名&lt;/li&gt;
      &lt;li&gt;返回(“filenam”,”.txt”)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.path.exists(“/home/username/test.txt”)
    &lt;ul&gt;
      &lt;li&gt;判断路径是否存在&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.path.abspath(“.”)
    &lt;ul&gt;
      &lt;li&gt;查看当前目录的绝对路径&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.mkdir(“/home/usrname/newdir”)
    &lt;ul&gt;
      &lt;li&gt;新建目录&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.rmdir(“/home/usrname/abandoneddir”)
    &lt;ul&gt;
      &lt;li&gt;删除目录&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.rename(“/home/username/oldname”, “/home/usrname/newname”)
    &lt;ul&gt;
      &lt;li&gt;重命名，&lt;strong&gt;要求第一个参数表示的路径真实存在，第二个表示的路径不存在。&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;可以把原文件复制到新的地方，并可重命名。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;os.remove(“/home/usrname/abandonedfile”)
    &lt;ul&gt;
      &lt;li&gt;删除文件&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;操作excel&quot;&gt;操作excel&lt;/h2&gt;

&lt;h3 id=&quot;xlrd读xls或者xlsx文件&quot;&gt;xlrd　读.xls或者.xlsx文件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import xlrd
import xlwt
import os
from xlutils.copy import copy

def readexcel():
    book = xlrd.open_workbook(&quot;/home/zj/桌面/test02allsimilarities.xls&quot;)
    # table = data.sheets()[0]
    sheet = book.sheet_by_index(0)  # 获取索引值为0的表单。
    # sheet = data.sheet_by_name(&quot;sheetname&quot;)  # 根据表单名获取表单。
    i = 1  # 索引都是从０开始的
    print(sheet.row_values(i))  # 返回包含第i+1行的值的list
    c = sheet.col_values(i)  # 返回包含第i+1列的值的list
    nrows = sheet.nrows  # 返回表单现有数据的行数
    ncols = sheet.ncols  # 返回表单现有数据的列数
    # print(ncols)
    cell_C4 = sheet.cell(3, 2).value  # 获取单元格C4的值，其索引为(4-3,2), C表示列的索引值。
    # print(cell_C4)
    cell_B3 = sheet.row(2)[1].value  # 根据行列来索引
    # print(cell_B3)
    # print(nrows)
    # cell_C4 = table.cell_value(3, 2)  # 获取单元格C4的值
    print(cell_C4)

def write_new_excel():
    workbook = xlwt.Workbook()  # 新建工作簿
    wsheet = workbook.add_sheet(&quot;sheetname&quot;)  # 添加工作表
    wsheet.write(1, 1, &quot;单元格的值&quot;)  # 表单中写入新的值，这里可以设置相关的格式
    workbook.save(&quot;filename_path&quot;)  # 保存


def write_to_old_or_new_excel(filename_path):
    # 判断该工作不是否存在，不存在就新建一个工作簿，并添加新的表单。
    if not os.path.exists(filename_path):
        w = xlwt.Workbook()
        ws = w.add_sheet(&quot;sheetname&quot;)
        w.save(filename_path)
    rexcel = xlrd.open_workbook(filename_path)  # 打开工作簿
    wexcel = copy(rexcel)  # 复制工作簿，从打开的xlrd的Book变量中，拷贝到xlwt的Workbook变量中。
    wsheet = wexcel.get_sheet(0)  # 从Workbook变量中获得对应索引的表单，
    xlwt.write(2, 2, &quot;value&quot;)  # 写数据
    rexcel.save(filename_path)  # 保存
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>软件安装</title>
        <link>http://localhost:4000/2017/08/12/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/12/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85.html</guid>
        <pubDate>Sat, 12 Aug 2017 00:00:00 +0800</pubDate>
        <description>
&lt;h2 id=&quot;ubuntu1604安装mongodb34&quot;&gt;ubuntu16.04安装mongodb3.4&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.mongodb.com/master/tutorial/install-mongodb-on-ubuntu/&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Import the public key used by the package management system.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a list file for MongoDB.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  echo &quot;deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;上面是官方的镜像源，国内下载特别慢，故换成阿里源：&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  echo &quot;deb [ arch=amd64,arm64 ] http://mirrors.aliyun.com/mongodb/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reload local package database.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the latest stable version of MongoDB.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt-get install -y mongodb-org
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h2 id=&quot;run-mongodb-community-edition&quot;&gt;Run MongoDB Community Edition&lt;/h2&gt;
    &lt;p&gt;The MongoDB instance stores its data files in /var/lib/mongodb and its log files in /var/log/mongodb by default, and runs using the mongodb user account. You can specify alternate log and data file directories in /etc/mongod.conf.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Start MongoDB.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo service mongod start
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;erify that MongoDB has started successfully.&lt;br /&gt;
查看mongodb的日志文件，最后一行会输出：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [initandlisten] waiting for connections on port &amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Stop MongoDB.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo service mongod stop
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart MongoDB.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo service mongod restart
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h2 id=&quot;uninstall-mongodb-community-edition&quot;&gt;Uninstall MongoDB Community Edition&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Stop MongoDB.&lt;/li&gt;
  &lt;li&gt;Remove packages:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo apt-get purge mongodb-org*
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Remove MongoDB databases and log files.&lt;/li&gt;
&lt;/ol&gt;

</description>
      </item>
    
      <item>
        <title>Data_structures</title>
        <link>http://localhost:4000/2017/08/11/Data_Structures.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/11/Data_Structures.html</guid>
        <pubDate>Fri, 11 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h1&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Sequence Type&lt;/li&gt;
  &lt;li&gt;listname = [“a”, “b”, “c”]&lt;/li&gt;
  &lt;li&gt;列表是有序的，可存储不同的数据类型，但常用做法是存储相同类型的数据。&lt;/li&gt;
  &lt;li&gt;列表是可迭代的（iterable），即可通过下标获取元素。如: list[0] = “a”&lt;/li&gt;
  &lt;li&gt;列表有下列方法：
    &lt;ul&gt;
      &lt;li&gt;list.append(x):　在list最后加上元素x。等价于: a[len(a):] = [x]&lt;/li&gt;
      &lt;li&gt;list.extend(iterable): 在list最后加上一组可迭代的元素。等价于: a[len(a):] = iterable&lt;/li&gt;
      &lt;li&gt;list.insert(i, x): 在list下标为i的元素前插入新的元素x。&lt;/li&gt;
      &lt;li&gt;list.remove(x): 移除list中值为x的第一个元素。如果么有该值，则会报错。&lt;/li&gt;
      &lt;li&gt;list.pop([i]): 移除list中下标为i的元素并返回该元素。如果省略i，则移除list中最后一个元素并返回该元素。&lt;/li&gt;
      &lt;li&gt;list.clear(): 移除list中所有元素。等价于: del a[:]&lt;/li&gt;
      &lt;li&gt;list.index(x[, start[, end]]): 返回list中第一个值为x的元素的下标。可选参数start和end为搜索范围，所有下标都是从０开始的。&lt;/li&gt;
      &lt;li&gt;list.count(x): 返回list中值为x的元素的个数。&lt;/li&gt;
      &lt;li&gt;list.sort(key=None, reverse=False): 给list中的元素按其unicode编码值排序，默认为升序。如果list中保存的不是同一类型的，则会报错。该sort()方法直接修改list，而内置函数sorted()返回一个新的排序好的list,原list并不会被改变。&lt;/li&gt;
      &lt;li&gt;list.reverse(): 倒转该list中的元素。&lt;/li&gt;
      &lt;li&gt;list.copy(): 返回一个&lt;strong&gt;新的&lt;/strong&gt;list。(Return a &lt;strong&gt;shallow copy&lt;/strong&gt; of the list.)　等价于: a[:]
        &lt;ul&gt;
          &lt;li&gt;示例：
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = [1, 2, 3]
b = [4, 5 6]
c = a
c.extend(b)  # 此时 c = [1, 2, 3, 4, 5, 6], a = [1, 2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;如果上面 c = a 改为 c = a.copy() 或者 a[:], 则 c 和 a 是独立的２个变量。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;实例：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
&amp;gt;&amp;gt;&amp;gt; fruits.count('apple')
2
&amp;gt;&amp;gt;&amp;gt; fruits.count('tangerine')
0
&amp;gt;&amp;gt;&amp;gt; fruits.index('banana')
3
&amp;gt;&amp;gt;&amp;gt; fruits.index('banana', 4)  # Find next banana starting a position 4
6
&amp;gt;&amp;gt;&amp;gt; fruits.reverse()
&amp;gt;&amp;gt;&amp;gt; fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']
&amp;gt;&amp;gt;&amp;gt; fruits.append('grape')
&amp;gt;&amp;gt;&amp;gt; fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']
&amp;gt;&amp;gt;&amp;gt; fruits.sort()
&amp;gt;&amp;gt;&amp;gt; fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
&amp;gt;&amp;gt;&amp;gt; fruits.pop()
'pear'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;list可以在堆栈中使用：
    &lt;ul&gt;
      &lt;li&gt;list.apend(): 先进&lt;/li&gt;
      &lt;li&gt;list.pop(): 后出&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;list同样可在队列中使用,不过在list的最前面删除元素开销比较大。因为list是线性序列，在其最后面添加或删除元素特别快。我们可以利用collection模块中的deque函数来实现队列：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from collection import deque
queue = queue(listname)
queue.apend(&quot;anotheritem&quot;)
queue.popleft() # 先出
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tuple&quot;&gt;tuple&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Sequence Type&lt;/li&gt;
  &lt;li&gt;tuplename = (1248,8421,”Hello”)&lt;/li&gt;
  &lt;li&gt;元组是无序的，是不可变对象，其值初始化后不能更改。但是其可以包含不可变对象，比如list,因为tuple保存的是list的name,list中元素变动，其name并不会改变。&lt;/li&gt;
  &lt;li&gt;tuple由许多由逗号分割开的值组成，一般用圆括号括起来。注意包含0个或一个元素的tuple，空tuple用圆括号括起来，只含一个元素的tuple在元素后面加一个逗号。
    &lt;ul&gt;
      &lt;li&gt;empty = ()&lt;/li&gt;
      &lt;li&gt;singleton = (“Hello”,)　　一般用括号括起来。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>ubuntu16.04安装gpu版tensorflow＋keras</title>
        <link>http://localhost:4000/2017/08/06/ubuntu16.04%E5%AE%89%E8%A3%85gpu%E7%89%88tensorflow-keras.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/06/ubuntu16.04%E5%AE%89%E8%A3%85gpu%E7%89%88tensorflow-keras.html</guid>
        <pubDate>Sun, 06 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h2 id=&quot;一-安装cuda&quot;&gt;一 安装cuda&lt;/h2&gt;

&lt;p&gt;１. &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;下载cuda&lt;/a&gt;,我选择的是.deb(local)版本的，下载万之后安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
2. sudo apt-get update
3. sudo apt-get install cuda
4. vim ~/.bashrc
5. 最后一行写上：export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;２. 验证 nvcc -V　显示编译器信息，则说明cuda配置成功了&lt;/p&gt;

&lt;p&gt;３. cuda性能测试&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 安装可写样本：cuda-install-samples-8.0.sh &amp;lt;dir&amp;gt;
2. cd NVIDIA_CUDA-8.0_Samples
3. make
4. cd NVIDIA_CUDA-8.0_Samples/bin/x86_64/linux/release
5. ./deviceQuery
6. 输出如图：结果显示pass则说明cuda安装配置完成。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../pics/verifycuda.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;４. 安装cudnn库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;１. 下载cudnn v5.1
2. 解压，然后把解压后的文件夹cuda下的include和lib64文件夹下的文件复制到/usr/local/cuda/下对应的include和lib64文件夹里。
	sudo cp include/cudnn.h /usr/local/cuda/include/
	sudo cp lib64/* /usr/local/cuda/lib64/
３. cd /usr/local/cuda/lib64
4. sudo ln -sf libcudnn.so.5.1.10 libcudnn.so.5
5. sudo ln -sf libcudnn.so.5 libcudnn.so
6. sudo ldconfig -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;二运算加速库&quot;&gt;二　运算加速库&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install -y libopenblas-dev liblapack-dev libatlas-base-dev
sudo apt-get install libcupti-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;三安装anaconda&quot;&gt;三　安装anaconda&lt;/h2&gt;
&lt;p&gt;网上教程很多，一笔带过了。&lt;/p&gt;

&lt;h2 id=&quot;四安装gpu版tensorflow&quot;&gt;四　安装gpu版&lt;a href=&quot;https://www.tensorflow.org/install/install_linux#InstallingAnaconda&quot;&gt;tensorflow&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. conda create -n tensorflow
2. source activate tensorflow
3. pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.2.1-cp35-cp35m-linux_x86_64.whl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 新建文件test.py，内容如下

	import tensorflow as tf
	hello = tf.constant('Hello, TensorFlow!')
	sess = tf.Session()
	print(sess.run(hello))

2. 输出：
	b'Hello, Tensorflow!'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;五安装keras&quot;&gt;五　安装keras&lt;/h2&gt;

&lt;h3 id=&quot;安装-1&quot;&gt;安装：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. pip install keras
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;验证-1&quot;&gt;验证：&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 终端输入：
	python -c &quot;import keras&quot;
2. 输出：
	Using TensorFlow backend.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
      </item>
    
      <item>
        <title>待整理笔记</title>
        <link>http://localhost:4000/2017/08/06/%E5%BE%85%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/06/%E5%BE%85%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0.html</guid>
        <pubDate>Sun, 06 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;using-jekyll-as-a-static-site-generator-with-github-pages&quot;&gt;&lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;Using Jekyll as a static site generator with GitHub Pages&lt;/a&gt;&lt;/h1&gt;

</description>
      </item>
    
      <item>
        <title>Basic knowledge of Linux</title>
        <link>http://localhost:4000/2017/08/06/Basic_knowledge_of_Linux.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/06/Basic_knowledge_of_Linux.html</guid>
        <pubDate>Sun, 06 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h2 id=&quot;一安装软件&quot;&gt;一、安装软件&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;.deb
    &lt;ul&gt;
      &lt;li&gt;安装软件：sudo dpkg -i &lt;em&gt;**&lt;/em&gt;.deb&lt;/li&gt;
      &lt;li&gt;卸载软件：sudo dpkg -r &lt;em&gt;**&lt;/em&gt;.deb&lt;/li&gt;
      &lt;li&gt;完全卸载软件：sudo dpkg -P &lt;em&gt;**&lt;/em&gt;.deb&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;apt
    &lt;ul&gt;
      &lt;li&gt;安装：sudo apt install &lt;package_name&gt;&lt;/package_name&gt;&lt;/li&gt;
      &lt;li&gt;卸载：sudo apt –purge remove &lt;package_name&gt;&lt;/package_name&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二硬链接和软链接符号链接的区别&quot;&gt;二、硬链接和软链接（符号链接）的区别&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/markdown-img-paste-20170807204239791.png&quot; alt=&quot;hard_and_soft_link&quot; /&gt;&lt;/p&gt;

&lt;p&gt;１. 硬链接 (hard link)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln file1 file1_hardlink
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;给file1创建了一个硬链接fiel1_hardlink，２个文件的内容是关联的，修改其中任何一个文件的内容，另一个文件也会跟着被修改，２个文件的大小一样。但是删除某一个文件并不会影响另一个文件。&lt;/p&gt;

&lt;p&gt;２. 软链接（soft link）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s file2 file2_softlink
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样２个文件是关联的，与硬链接不同的是，软链接文件的大小为０，删除或移动原文件会影响软链接文件。&lt;/p&gt;

&lt;p&gt;３. 此处只做了简单区分，&lt;a href=&quot;https://askubuntu.com/questions/108771/what-is-the-difference-between-a-hard-link-and-a-symbolic-link&quot;&gt;参考自这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;三设置程序开机自启&quot;&gt;三、设置程序开机自启&lt;/h2&gt;

&lt;p&gt;方法有很多，这里只记录其中一种：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. sudo vim /etc/rc.local
2. 在exit 0之前添加想在开机时运行的命令
3. 如果想以指定用户运行某个命令: sudo -u username &amp;lt;cmd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;四终端使用socks5代理&quot;&gt;四、终端使用socks5代理&lt;/h2&gt;

&lt;h3 id=&quot;配置&quot;&gt;配置：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;sudo apt install polipo&lt;/li&gt;
  &lt;li&gt;sudo vim /etc/polipo/config&lt;/li&gt;
  &lt;li&gt;config内容设置如下：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; logSyslog = true
 logFile = /var/log/polipo/polipo.log
 socksParentProxy = &quot;localhost:1080&quot;
 socksProxyType = socks5
 logLevel=4
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;关闭软件，让设置生效: sudo service polipo stop&lt;/li&gt;
  &lt;li&gt;sudo service polipo start&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;vim ~/.bashrc&lt;/li&gt;
  &lt;li&gt;最后一行写入：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; alias ss=&quot;http_proxy=http://localhost:8123&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;alias命令是设置别名用的，这里ss就代表”http_proxy=http://localhost:8123”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;以代理方式运行某条命令，只需在其前面加上ss就可以了。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 例如：ss curl ip.gs　(显示当前ip的详细信息。)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h3 id=&quot;git需要重新配置代理&quot;&gt;git需要重新配置代理&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;socks5代理：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git config --global http.proxy 'socks5://127.0.0.1:1080'
 git config --global https.proxy 'socks5://127.0.0.1:1080'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;http代理：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git config --global http.proxy https://127.0.0.1:1080
 git config --global https.proxy https://127.0.0.1:1080
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;取消：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git config --global --unset http.proxy
 git config --global --unset https.proxy
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h3 id=&quot;pip配置代理&quot;&gt;pip配置代理&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;vim ~/.bashrc&lt;/li&gt;
  &lt;li&gt;最后一行加上：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; alias pip=&quot;pip --proxy 127.0.0.1:8123&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;source ~/.bashrc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##　五、ubuntu和windows共享文件系统（永久）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;sudo fdisk -l 查看想要挂载的分区的设备号，如/dev/sdb1&lt;/li&gt;
  &lt;li&gt;sudo vim /etc/fstab 在最后一行添加自己想要挂载的设备号，如：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; dev/sdb1       /home/zj/dataShare      ntfs    defaults        0       0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;保存重启。注意，挂载点不能为用户根目录，否则后果很严重。　　&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;六修改双系统下默认启动系统&quot;&gt;六、修改双系统下默认启动系统&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;ubuntu下：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo vim /etc/default/grub
 sudo update-grub
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;GRUB_DEFAULT=0表示默认启动第一个。&lt;/li&gt;
  &lt;li&gt;GRUB_TIMEOUT=3表示等待３s后启动。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;七权限管理&quot;&gt;七、权限管理&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;修改文件权限：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  chmod 754 myfile
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;上式表示修改文件myfile的权限为：user只可以rwx(读，写和执行)，同group只可以rx（读和执行），other只可以w（写）。&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;r=4, w=2, x=1 分别对应read,　write，xecute&lt;/li&gt;
      &lt;li&gt;7=4+2+1, 5=4+0+1, 4=4+0+0&lt;/li&gt;
      &lt;li&gt;三个数字分别对应user, group, other　　　&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另一种方式是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  chmod [ugoa] [+-=] [rwx] myfile2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如给文件myfile2的所有者（即user）增加可执行权限：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  chmod u+x myfile2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;u: user&lt;/li&gt;
  &lt;li&gt;g: group&lt;/li&gt;
  &lt;li&gt;o: other&lt;/li&gt;
  &lt;li&gt;a: all&lt;/li&gt;
  &lt;li&gt;+: 增加权限&lt;/li&gt;
  &lt;li&gt;-: 减少权限&lt;/li&gt;
  &lt;li&gt;=: 重置权限&lt;/li&gt;
  &lt;li&gt;r: read&lt;/li&gt;
  &lt;li&gt;w: write&lt;/li&gt;
  &lt;li&gt;x: xecute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;未完待续&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Atom简单使用</title>
        <link>http://localhost:4000/2017/08/05/Atom%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/05/Atom%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</guid>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h2 id=&quot;一-atom安装package&quot;&gt;一、 Atom安装package&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;进&lt;a href=&quot;https://atom.io/packages&quot;&gt;官网&lt;/a&gt;搜索对应的包&lt;/li&gt;
  &lt;li&gt;转到对应包的github地址，复制地址&lt;/li&gt;
  &lt;li&gt;在.git/packages/目录下　git clone +地址&lt;/li&gt;
  &lt;li&gt;进入下载的包里&lt;/li&gt;
  &lt;li&gt;apm install&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;二markdown-table-editor简单使用&quot;&gt;二、&lt;a href=&quot;https://atom.io/packages/markdown-table-editor&quot;&gt;Markdown-table-editor简单使用&lt;/a&gt;&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Keybinding&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Next Cell&lt;/td&gt;
      &lt;td&gt;Move to next cell&lt;/td&gt;
      &lt;td&gt;Tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Previous Cell&lt;/td&gt;
      &lt;td&gt;Move to previous cell&lt;/td&gt;
      &lt;td&gt;Shift-Tab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Next Row&lt;/td&gt;
      &lt;td&gt;Move to next row&lt;/td&gt;
      &lt;td&gt;Enter&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Escape&lt;/td&gt;
      &lt;td&gt;Escape from table&lt;/td&gt;
      &lt;td&gt;Esc&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;英文键盘输入”&lt;/td&gt;
          &lt;td&gt;“,然后输入第一单元格的内容；&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;英文键盘输入”Tab”,接着输入第二个单元格的内容&lt;/li&gt;
  &lt;li&gt;“Enter”进入第二行输入&lt;/li&gt;
&lt;/ol&gt;

</description>
      </item>
    
      <item>
        <title>ubuntu16.04连接AWS EC2</title>
        <link>http://localhost:4000/2017/08/05/ubuntu16.04%E8%BF%9E%E6%8E%A5AWS-EC2.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/05/ubuntu16.04%E8%BF%9E%E6%8E%A5AWS-EC2.html</guid>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;ubuntu1604连接aws-ec2&quot;&gt;ubuntu16.04连接AWS EC2&lt;/h1&gt;

&lt;h2 id=&quot;密钥必须不公开可见ssh-才能工作修改私钥权限为400&quot;&gt;密钥必须不公开可见，SSH 才能工作。修改私钥权限为400&lt;/h2&gt;
 	chmod 400 &lt;em&gt;**&lt;/em&gt;.pem

&lt;h2 id=&quot;连接&quot;&gt;连接&lt;/h2&gt;
 	ssh -i &lt;em&gt;**&lt;/em&gt;.pem “username@ip”
</description>
      </item>
    
      <item>
        <title>Ubuntu16.04 安装node.js并配置</title>
        <link>http://localhost:4000/2017/08/04/Ubuntu16.04%E5%AE%89%E8%A3%85node.js.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/04/Ubuntu16.04%E5%AE%89%E8%A3%85node.js.html</guid>
        <pubDate>Fri, 04 Aug 2017 00:00:00 +0800</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;参考自&lt;a href=&quot;https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions&quot;&gt;nodejs官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;安装nodejs-8&quot;&gt;安装node.js 8&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
sudo apt update
sudo apt upgrade
sudo apt install -y nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;验证&quot;&gt;验证&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node -v
输出类似于v8.2.1则说明安装成功。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;换成国内镜像源&quot;&gt;换成国内镜像源&lt;/h2&gt;

&lt;h3 id=&quot;全局安装nrm任意切换源&quot;&gt;全局安装nrm,任意切换源&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install　－g nrm ### nrm简单使用：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;nrm ls （列出所有可用镜像源）&lt;/li&gt;
  &lt;li&gt;nrm use taobao (使用淘宝的镜像源，也可以换成其他的)
    &lt;ul&gt;
      &lt;li&gt;例如：nrm use npm&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
  </channel>
</rss>